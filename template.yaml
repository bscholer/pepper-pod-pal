AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pepper-pod-pal

  Sample SAM Template for pepper-pod-pal

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
  Api:
    TracingEnabled: true

Parameters:
  DbPassword:
    Type: String
  DbStackName:
    Type: String
    Default: plants-db-stack
  ApiKey:
    Type: String

Resources:
  # CloudWatch Log Group for API Gateway Access Logs
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/apis/${AWS::StackName}/accesslogs"
      RetentionInDays: 30

  PlantsFastApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api
      Handler: main.handler
      Runtime: python3.11
      MemorySize: 512
      Timeout: 30
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            # ApiId: !Ref PlantsFastHttpApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          DB_HOST:
            Fn::ImportValue: !Sub "${DbStackName}-PlantsDBInstanceEndpoint"
          DB_NAME: plants
          DB_USER: bscholer
          DB_PASSWORD: !Ref DbPassword
          API_KEY: !Ref ApiKey

  KeepWarmSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Lambda function every 5 minutes to keep it warm"
      ScheduleExpression: "rate(5 minutes)"
      Targets:
        - Arn: !GetAtt PlantsFastApiFunction.Arn
          Id: "TargetFunctionV1"
      State: "ENABLED"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PlantsFastApiFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt KeepWarmSchedule.Arn

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  PlantsApi:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${PlantsFastApiFunction}.execute-api.${AWS::Region}.amazonaws.com/"
